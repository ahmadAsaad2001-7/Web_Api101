// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web_Api101.Data;

#nullable disable

namespace Web_Api101.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "d718eabf-ce9f-46e3-b821-c3e8762eeafd",
                            ConcurrencyStamp = "4f4b36e1-e4c6-45e9-8d58-d90a8935f2e8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "483289d8-e4b8-4bcc-b1a0-c1f3e9648e6c",
                            ConcurrencyStamp = "7af9af4a-5137-49f0-96c4-3733c7f3fa2e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Web_Api101.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Web_Api101.models.burn_patient", b =>
                {
                    b.Property<int>("patient_id")
                        .HasColumnType("int");

                    b.Property<int>("burn_id")
                        .HasColumnType("int");

                    b.HasKey("patient_id", "burn_id");

                    b.HasIndex("burn_id");

                    b.ToTable("burn_Patients");
                });

            modelBuilder.Entity("Web_Api101.models.burns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("degree")
                        .HasColumnType("int");

                    b.Property<string>("sensitivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("burns");
                });

            modelBuilder.Entity("Web_Api101.models.clinics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("locid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("worktime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("locid");

                    b.ToTable("clinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            locid = 1
                        },
                        new
                        {
                            Id = 2,
                            locid = 2
                        });
                });

            modelBuilder.Entity("Web_Api101.models.doctor_clinic", b =>
                {
                    b.Property<int>("clinic_id")
                        .HasColumnType("int");

                    b.Property<int>("doctor_id")
                        .HasColumnType("int");

                    b.HasKey("clinic_id", "doctor_id");

                    b.HasIndex("doctor_id");

                    b.ToTable("doctor_Clinics");
                });

            modelBuilder.Entity("Web_Api101.models.doctors", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("LocationId");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            LocationId = 1,
                            gender = "M",
                            name = "Hasanin",
                            speciality = "Cardiology"
                        },
                        new
                        {
                            id = 2,
                            LocationId = 1,
                            gender = "F",
                            name = "Mohsen",
                            speciality = "Pediatrics"
                        },
                        new
                        {
                            id = 3,
                            LocationId = 2,
                            gender = "m",
                            name = "ragab",
                            speciality = "Pediatrics"
                        });
                });

            modelBuilder.Entity("Web_Api101.models.hospital_doctor", b =>
                {
                    b.Property<int>("doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("hospital_id")
                        .HasColumnType("int");

                    b.HasKey("doctor_id", "hospital_id");

                    b.HasIndex("hospital_id");

                    b.ToTable("hospital_Doctors");
                });

            modelBuilder.Entity("Web_Api101.models.hospitals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("hospital_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("locid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("locid");

                    b.ToTable("hospitals");

                    b.HasData(
                        new
                        {
                            id = 1,
                            hospital_name = "Hospital A",
                            locid = 1
                        },
                        new
                        {
                            id = 2,
                            hospital_name = "Hospital B",
                            locid = 2
                        });
                });

            modelBuilder.Entity("Web_Api101.models.location", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("location_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("locations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            location_name = "farshut"
                        },
                        new
                        {
                            id = 2,
                            location_name = "qous"
                        });
                });

            modelBuilder.Entity("Web_Api101.models.patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("locid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("locid");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("Web_Api101.models.phones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("clinicId")
                        .HasColumnType("int");

                    b.Property<int?>("doctorId")
                        .HasColumnType("int");

                    b.Property<int?>("hospitalId")
                        .HasColumnType("int");

                    b.Property<int?>("patientId")
                        .HasColumnType("int");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("clinicId");

                    b.HasIndex("doctorId");

                    b.HasIndex("hospitalId");

                    b.HasIndex("patientId");

                    b.ToTable("phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            doctorId = 1,
                            phone_number = "0100212121"
                        },
                        new
                        {
                            Id = 2,
                            doctorId = 2,
                            phone_number = "0100333333"
                        });
                });

            modelBuilder.Entity("Web_Api101.models.burn_patient", b =>
                {
                    b.HasOne("Web_Api101.models.burns", "burn")
                        .WithMany("burn_Patients")
                        .HasForeignKey("burn_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_Api101.models.patient", "patient")
                        .WithMany("burn_Patients")
                        .HasForeignKey("patient_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("burn");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Web_Api101.models.clinics", b =>
                {
                    b.HasOne("Web_Api101.models.location", "loc")
                        .WithMany("clinics_locations")
                        .HasForeignKey("locid");

                    b.Navigation("loc");
                });

            modelBuilder.Entity("Web_Api101.models.doctor_clinic", b =>
                {
                    b.HasOne("Web_Api101.models.doctors", "doctor")
                        .WithMany("doctor_Clinics")
                        .HasForeignKey("clinic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_Api101.models.clinics", "clinic")
                        .WithMany("doctor_Clinics")
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clinic");

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Web_Api101.models.doctors", b =>
                {
                    b.HasOne("Web_Api101.models.location", "location")
                        .WithMany("doctors_locations")
                        .HasForeignKey("LocationId");

                    b.Navigation("location");
                });

            modelBuilder.Entity("Web_Api101.models.hospital_doctor", b =>
                {
                    b.HasOne("Web_Api101.models.doctors", "doctor")
                        .WithMany("hospital_Doctors")
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_Api101.models.hospitals", "hospital")
                        .WithMany("hospital_Doctors")
                        .HasForeignKey("hospital_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("hospital");
                });

            modelBuilder.Entity("Web_Api101.models.hospitals", b =>
                {
                    b.HasOne("Web_Api101.models.location", "loc")
                        .WithMany("hospitals_locations")
                        .HasForeignKey("locid");

                    b.Navigation("loc");
                });

            modelBuilder.Entity("Web_Api101.models.patient", b =>
                {
                    b.HasOne("Web_Api101.models.location", "loc")
                        .WithMany("patients_locations")
                        .HasForeignKey("locid");

                    b.Navigation("loc");
                });

            modelBuilder.Entity("Web_Api101.models.phones", b =>
                {
                    b.HasOne("Web_Api101.models.clinics", "clinics")
                        .WithMany("Phones")
                        .HasForeignKey("clinicId");

                    b.HasOne("Web_Api101.models.doctors", "doctors")
                        .WithMany("phones")
                        .HasForeignKey("doctorId");

                    b.HasOne("Web_Api101.models.hospitals", "hospitals")
                        .WithMany("Phones")
                        .HasForeignKey("hospitalId");

                    b.HasOne("Web_Api101.models.patient", "patient")
                        .WithMany("Phones")
                        .HasForeignKey("patientId");

                    b.Navigation("clinics");

                    b.Navigation("doctors");

                    b.Navigation("hospitals");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Web_Api101.models.burns", b =>
                {
                    b.Navigation("burn_Patients");
                });

            modelBuilder.Entity("Web_Api101.models.clinics", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("doctor_Clinics");
                });

            modelBuilder.Entity("Web_Api101.models.doctors", b =>
                {
                    b.Navigation("doctor_Clinics");

                    b.Navigation("hospital_Doctors");

                    b.Navigation("phones");
                });

            modelBuilder.Entity("Web_Api101.models.hospitals", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("hospital_Doctors");
                });

            modelBuilder.Entity("Web_Api101.models.location", b =>
                {
                    b.Navigation("clinics_locations");

                    b.Navigation("doctors_locations");

                    b.Navigation("hospitals_locations");

                    b.Navigation("patients_locations");
                });

            modelBuilder.Entity("Web_Api101.models.patient", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("burn_Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
